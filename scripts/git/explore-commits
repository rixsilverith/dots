#!/usr/bin/bash

##? Interactively explore Git repository commit history

git::is_in_repo() {
	git rev-parse HEAD >/dev/null 2>&1
}

git::commit-summary() {
    commit_hash=$(echo -- "$@" | grep -o "[a-f0-9]\{7\}")
    commit_info=$(git show --no-patch --pretty="%H;%aN;%aE;%ad;%cn;%cE;%cd;%s;%N;%d" $commit_hash)

    commit_full_hash=$(echo "$commit_info" | cut -d";" -f1)
    commit_author=$(echo "$commit_info" | cut -d";" -f2)
    commit_author_email=$(echo "$commit_info" | cut -d";" -f3)
    commit_author_date=$(echo "$commit_info" | cut -d";" -f4)
    commit_committer=$(echo "$commit_info" | cut -d";" -f5)
    commit_committer_email=$(echo "$commit_info" | cut -d";" -f6)
    commit_committer_date=$(echo "$commit_info" | cut -d";" -f7)
    commit_message=$(echo "$commit_info" | cut -d";" -f8)
    commit_notes=$(echo "$commit_info" | cut -d";" -f9)
    commit_refnames=$(echo "$commit_info" | cut -d";" -f10)

    echo -e "commit \033[1m$commit_full_hash\033[0m\n"
    [[ -n "$commit_refnames" ]] && echo -e "$commit_refnames\n"
    echo -e "authored \033[1m$commit_author\033[0m ($commit_author_email)"
    echo "on $commit_author_date\n"
    echo -e "committed \033[1m$commit_committer\033[0m ($commit_committer_email)"
    echo "on $commit_committer_date\n"
    echo -e "\t\033[1m$commit_message\033[0m\n"
    [[ -n "$commit_notes" ]] && echo -e "$commit_notes"

    # see https://gist.github.com/junegunn/f4fca918e937e6bf5bad?permalink_comment_id=4075799#gistcomment-4075799
    git show --stat --format="" --color=always $commit_hash |
        while read line; do
            tput dim
            echo " $line" | sed "s/\x1B\[m/\x1B\[2m/g"
            tput sgr0
        done | tac | sed "1 a \ " | tac
}

git::explore-files-in-commit() {
    #? open a fzf instance containing the list of changed files in the given commit,
    #? previwing its diff

    commit_hash=$(echo -- "$@" | grep -o "[a-f0-9]\{8\}")

    ENTER_F="git show --color=always $commit_hash -- \{} | less --tabs=4 -Rc"

    git show --pretty="" --name-only "$commit_hash" | fzf --bind="enter:execute:$ENTER_F" \
        --preview-window=right:70%:wrap \
        --preview "git show --color=always $commit_hash -- \{}" # see https://github.com/junegunn/fzf/issues/1846
}

git::commit-finder() {
    #? open a fzf instance containing the given list of commits.
    #? entering a commit lists the files changed, with their diff in preview

    ENTER_F="$(declare -f git::explore-files-in-commit); git::explore-files-in-commit {}"
    PREVIEW_F="$(declare -f git::commit-summary); git::commit-summary {}"

    commit_list="$1"
    [[ $# -gt 1 ]] && ENTER_F="$2"

    echo -e "$commit_list" | fzf --ansi --bind "enter:execute:$ENTER_F" --exit-0 \
        --preview-window=right:60%:border-sharp:wrap --preview "$PREVIEW_F"
}

git::explore-commits() {
    #? list all commits in the git repository history.
    #? entering a commit lists the files changed there, with the
    #?      preview window showing the diff for that file

    commits=$(git log --graph --color=always --format="%C(bold)%h  %C(reset)%s")
    git::commit-finder "$commits"
}

_git::less-commit-file-diff() {
    #? show diff in less for the given file and commit
    #?
    #? _git::less-commit-file-diff is intented to be used internally by
    #? git::explore-commits::from-file

    file=$1; shift
    commit_hash=$(echo -- "$@" | grep -o "[a-f0-9]\{8\}")
    git show --color=always $commit_hash -- "$file" | less --tabs=4 -Rc
}

git::explore-commits::from-file() {
    # run `git ls-files` from the git repository root
    cd "$(command git rev-parse --git-dir)/.."
    file=$(git ls-files | fzf --exit-0)
    [[ -z "$file" ]] && exit 0

    ENTER_F="$(declare -f _git::less-commit-file-diff); _git::less-commit-file-diff \"$file\" {}"
    commit_list=$(git log --graph --color=always --format="%C(bold)%h  %C(reset)%s" -- "$file")
    git::commit-finder "$commit_list" "$ENTER_F"
}

if ! git::is_in_repo; then
    echo "fatal: not a git repository (or any of the parent directories): .git" && exit 1
fi

[[ $# -eq 0 ]] && git::explore-commits
[[ "$1" == "files" ]] && git::explore-commits::from-file

exit 0

