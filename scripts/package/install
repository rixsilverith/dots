#!/usr/bin/bash

source "$DOTS_HOME/scripts/core/dot.sh"

##? Installs a package
##?
##? Usage: dot (package|pkg) install [package]
##?
##?    If [package] is not specified, all packages listed in the
##?    $DOTS_HOME/misc/packages.csv file will be installed by default.
##?
docs::parse "$@"

set +e # Prevent the script from crashing if a package couldn't be installed
overwrite() { echo -e "\r\033[1A\033[0K$@"; }

pkg::is_installed() {
  local -r pkgname="$1"
  pacman -Qi "$pkgname" &> /dev/null
  [[ "$?" == '0' ]]
}

pkg::install() {
  local -r pkg_to_install="$1"

  log::info "Installing $pkg_to_install"
  paru -S --noconfirm "$pkg_to_install" &> /dev/null

  pkg::is_installed "$pkg_to_install" && log::success "$pkg_to_install installed successfully" && exit 0
  log::error "$pkg_to_install couldn't be installed" && exit 1
}

pkg::install_all() {
  local -r pkg_total=$(cat "$DOTS_HOME/misc/packages.csv" | wc -l)
  local pkg_i=1
  declare -a failed_pkgs=()

  log::info "Installing packages"

  while IFS=", " read -r package desc; do
    if ! pkg::is_installed "$package"; then
      overwrite "$(log::info "Installing \033[1;32m$package \033[1;36m[$pkg_i/$pkg_total]\033[0m")"
      paru -S --noconfirm "$package" &> /dev/null

      pkg::is_installed "$package" || failed_pkgs+=("$package")
    fi

    let "pkg_i++"
  done < "$DOTS_HOME/misc/packages.csv"

  overwrite "$(log::success "Done installing packages")"
  [[ "${#failed_pkgs[@]}" == '0' ]] && exit 0

  log::info "Some packages couldn't be installed:"
  for pkg in "${failed_pkgs[@]}"; do echo "  $pkg"; done
  exit 1
}

command -v pacman &> /dev/null || log::abort "pacman is not installed"
command -v paru &> /dev/null || log::abort "paru is not installed"

[ $# -eq 0 ] && pkg::install_all

package_name="$1"
pkg::is_installed "$package_name" && log::info "$package_name is already installed" && exit 0

pkg::install "$package_name"

